diff --git i/lua/telescope/make_entry.lua w/lua/telescope/make_entry.lua
index e3d7638..fe3f8ef 100644
--- i/lua/telescope/make_entry.lua
+++ w/lua/telescope/make_entry.lua
@@ -310,11 +310,14 @@ end
 function make_entry.gen_from_quickfix(opts)
   opts = opts or {}
 
+  local icon_width = 0
+  local icon, _ = utils.get_devicons("fname", false)
+  icon_width = strings.strdisplaywidth(icon)
+
   local displayer = entry_display.create {
-    separator = "‚ñè",
+    separator = " ",
     items = {
-      { width = 8 },
-      { width = 0.45 },
+      { width = icon_width },
       { remaining = true },
     },
   }
@@ -322,12 +325,11 @@ function make_entry.gen_from_quickfix(opts)
   local make_display = function(entry)
     local filename = utils.transform_path(opts, entry.filename)
 
-    local line_info = { table.concat({ entry.lnum, entry.col }, ":"), "TelescopeResultsLineNr" }
+    local icon, hl_group = utils.get_devicons(entry.filename, false)
 
     return displayer {
-      line_info,
-      entry.text:gsub(".* | ", ""),
-      filename,
+      { icon, hl_group },
+      filename .. ":" .. entry.lnum .. ":" .. entry.col
     }
   end
 
@@ -358,9 +360,8 @@ function make_entry.gen_from_lsp_symbols(opts)
   local bufnr = opts.bufnr or vim.api.nvim_get_current_buf()
 
   local display_items = {
-    { width = opts.symbol_width or 25 }, -- symbol
-    { width = opts.symbol_type_width or 8 }, -- symbol type
-    { remaining = true }, -- filename{:optional_lnum+col} OR content preview
+    { width = opts.symbol_width }, -- symbol
+    { width = opts.symbol_type_width }, -- symbol type
   }
 
   if opts.ignore_filename and opts.show_line then
@@ -374,33 +375,12 @@ function make_entry.gen_from_lsp_symbols(opts)
   }
 
   local make_display = function(entry)
-    local msg
-
-    -- what to show in the last column: filename or symbol information
-    if opts.ignore_filename then -- ignore the filename and show line preview instead
-      -- TODO: fixme - if ignore_filename is set for workspace, bufnr will be incorrect
-      msg = vim.api.nvim_buf_get_lines(bufnr, entry.lnum - 1, entry.lnum, false)[1] or ""
-      msg = vim.trim(msg)
-    else
-      local filename = utils.transform_path(opts, entry.filename)
-
-      if opts.show_line then -- show inline line info
-        filename = filename .. " [" .. entry.lnum .. ":" .. entry.col .. "]"
-      end
-      msg = filename
-    end
-
     local type_highlight = opts.symbol_highlights or lsp_type_highlight
     local display_columns = {
       entry.symbol_name,
       { entry.symbol_type:lower(), type_highlight[entry.symbol_type], type_highlight[entry.symbol_type] },
-      msg,
     }
 
-    if opts.ignore_filename and opts.show_line then
-      table.insert(display_columns, 2, { entry.lnum .. ":" .. entry.col, "TelescopeResultsLineNr" })
-    end
-
     return displayer(display_columns)
   end
 
@@ -446,8 +426,6 @@ function make_entry.gen_from_buffer(opts)
   local displayer = entry_display.create {
     separator = " ",
     items = {
-      { width = opts.bufnr_width },
-      { width = 4 },
       { width = icon_width },
       { remaining = true },
     },
@@ -461,22 +439,16 @@ function make_entry.gen_from_buffer(opts)
     local icon, hl_group = utils.get_devicons(entry.filename, disable_devicons)
 
     return displayer {
-      { entry.bufnr, "TelescopeResultsNumber" },
-      { entry.indicator, "TelescopeResultsComment" },
       { icon, hl_group },
       display_bufname .. ":" .. entry.lnum,
     }
   end
 
   return function(entry)
-    local bufname = entry.info.name ~= "" and entry.info.name or "[No Name]"
+    local bufname = entry.info.name ~= "" and entry.info.name or "üÜï"
     -- if bufname is inside the cwd, trim that part of the string
     bufname = Path:new(bufname):normalize(cwd)
 
-    local hidden = entry.info.hidden == 1 and "h" or "a"
-    local readonly = vim.api.nvim_buf_get_option(entry.bufnr, "readonly") and "=" or " "
-    local changed = entry.info.changed == 1 and "+" or " "
-    local indicator = entry.flag .. hidden .. readonly .. changed
     local line_count = vim.api.nvim_buf_line_count(entry.bufnr)
 
     return {
@@ -490,7 +462,6 @@ function make_entry.gen_from_buffer(opts)
       filename = bufname,
       -- account for potentially stale lnum as getbufinfo might not be updated or from resuming buffers picker
       lnum = entry.info.lnum ~= 0 and math.max(math.min(entry.info.lnum, line_count), 1) or 1,
-      indicator = indicator,
     }
   end
 end
