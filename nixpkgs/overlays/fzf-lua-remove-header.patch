diff --git i/lua/fzf-lua/core.lua w/lua/fzf-lua/core.lua
index 28fd9d5..b5e8166 100644
--- i/lua/fzf-lua/core.lua
+++ w/lua/fzf-lua/core.lua
@@ -545,113 +545,6 @@ M.set_fzf_field_index = function(opts, default_idx, default_expr)
 end
 
 M.set_header = function(opts, hdr_tbl)
-  local function normalize_cwd(cwd)
-    if path.starts_with_separator(cwd) and cwd ~= vim.loop.cwd() then
-      -- since we're always converting cwd to full path
-      -- try to convert it back to relative for display
-      cwd = path.relative(cwd, vim.loop.cwd())
-    end
-    -- make our home dir path look pretty
-    return path.HOME_to_tilde(cwd)
-  end
-
-  if not opts then opts = {} end
-  if opts.cwd_prompt or opts.show_cwd_prompt then
-    opts.prompt = normalize_cwd(opts.cwd or vim.loop.cwd())
-    if not path.ends_with_separator(opts.prompt) then
-      opts.prompt = opts.prompt .. path.separator()
-    end
-  end
-  if opts.no_header or opts.headers == false then
-    return opts
-  end
-  local definitions = {
-    -- key: opt name
-    -- val.hdr_txt_opt: opt header string name
-    -- val.hdr_txt_str: opt header string text
-    cwd = {
-      hdr_txt_opt = "cwd_header",
-      hdr_txt_str = "cwd: ",
-      hdr_txt_col = "red",
-      val = function()
-        -- do not display header when we're inside our
-        -- cwd unless the caller specifically requested
-        if opts.show_cwd_header == false or opts.show_cwd_header == nil and
-            (not opts.cwd or opts.cwd == vim.loop.cwd()) then
-          return
-        end
-        return normalize_cwd(opts.cwd or vim.loop.cwd())
-      end
-    },
-    search = {
-      hdr_txt_opt = "grep_header",
-      hdr_txt_str = "Grep string: ",
-      hdr_txt_col = "red",
-      val = function()
-        return opts.search and #opts.search > 0 and opts.search
-      end,
-    },
-    lsp_query = {
-      hdr_txt_opt = "lsp_query_header",
-      hdr_txt_str = "Query: ",
-      hdr_txt_col = "red",
-      val = function()
-        return opts.lsp_query and #opts.lsp_query > 0 and opts.lsp_query
-      end,
-    },
-    regex_filter = {
-      hdr_txt_opt = "regex_header",
-      hdr_txt_str = "Regex filter: ",
-      hdr_txt_col = "red",
-      val = function()
-        return opts.regex_filter and #opts.regex_filter > 0 and opts.regex_filter
-      end,
-    },
-    actions = {
-      hdr_txt_opt = "interactive_header",
-      hdr_txt_str = "",
-      val = function()
-        if opts.no_header_i then return end
-        local defs = ACTION_DEFINITIONS
-        for k, v in pairs(opts.actions) do
-          if type(v) == "table" and defs[v[1]] then
-            local to = opts.fn_reload and defs[v[1]].fn_reload or defs[v[1]][1]
-            return to and (":: <%s> to %s"):format(
-              utils.ansi_codes.yellow(k), utils.ansi_codes.red(to))
-          end
-        end
-      end,
-    },
-  }
-  -- by default we only display cwd headers
-  -- header string constructed in array order
-  if not opts.headers then
-    opts.headers = hdr_tbl or { "cwd" }
-  end
-  -- override header text with the user's settings
-  for _, h in ipairs(opts.headers) do
-    assert(definitions[h])
-    local hdr_text = opts[definitions[h].hdr_txt_opt]
-    if hdr_text then
-      definitions[h].hdr_txt_str = hdr_text
-    end
-  end
-  -- build the header string
-  local hdr_str
-  for _, h in ipairs(opts.headers) do
-    assert(definitions[h])
-    local def = definitions[h]
-    local txt = def.val()
-    if def and txt then
-      hdr_str = not hdr_str and "" or (hdr_str .. ", ")
-      hdr_str = ("%s%s%s"):format(hdr_str, def.hdr_txt_str,
-        not def.hdr_txt_col and txt or
-        utils.ansi_codes[def.hdr_txt_col](txt))
-    end
-  end
-  if hdr_str and #hdr_str > 0 then
-    opts.fzf_opts["--header"] = libuv.shellescape(hdr_str)
-  end
   return opts
 end
 
diff --git i/lua/fzf-lua/providers/nvim.lua w/lua/fzf-lua/providers/nvim.lua
index ecb80c9..b907f98 100644
--- i/lua/fzf-lua/providers/nvim.lua
+++ w/lua/fzf-lua/providers/nvim.lua
@@ -68,7 +68,6 @@ end
 M.command_history = function(opts)
   opts = config.normalize_opts(opts, config.globals.command_history)
   if not opts then return end
-  opts.fzf_opts["--header"] = arg_header("<CR>", "<Ctrl-e>", "execute")
   history(opts, "cmd")
 end
 
