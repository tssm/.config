diff --git i/lua/noice/view/scrollbar.lua w/lua/noice/view/scrollbar.lua
index d4e95c0..c51ce4e 100644
--- i/lua/noice/view/scrollbar.lua
+++ w/lua/noice/view/scrollbar.lua
@@ -83,59 +83,7 @@ function Scrollbar:hide()
   end
 end
 
-function Scrollbar:update()
-  if not vim.api.nvim_win_is_valid(self.winnr) then
-    return self:hide()
-  end
-
-  local pos = vim.api.nvim_win_get_position(self.winnr)
-
-  local dim = {
-    row = pos[1] - self.opts.padding.top,
-    col = pos[2] - self.opts.padding.left,
-    width = vim.api.nvim_win_get_width(self.winnr) + self.opts.padding.left + self.opts.padding.right,
-    height = vim.api.nvim_win_get_height(self.winnr) + self.opts.padding.top + self.opts.padding.bottom,
-  }
-
-  local buf_height = Util.nui.win_buf_height(self.winnr)
-
-  if self.opts.autohide and dim.height >= buf_height then
-    self:hide()
-    return
-  elseif not self.visible then
-    self:show()
-  end
-
-  if not (vim.api.nvim_win_is_valid(self.bar.winnr) and vim.api.nvim_win_is_valid(self.thumb.winnr)) then
-    self:hide()
-    self:show()
-  end
-
-  local zindex = vim.api.nvim_win_get_config(self.winnr).zindex or 50
-
-  Util.win_apply_config(self.bar.winnr, {
-    height = dim.height,
-    width = 1,
-    col = dim.col + dim.width - 1,
-    row = dim.row,
-    zindex = zindex + 1,
-  })
-
-  local thumb_height = math.floor(dim.height * dim.height / buf_height + 0.5)
-  thumb_height = math.max(1, thumb_height)
-
-  local pct = vim.api.nvim_win_get_cursor(self.winnr)[1] / buf_height
-
-  local thumb_offset = math.floor(pct * (dim.height - thumb_height) + 0.5)
-
-  Util.win_apply_config(self.thumb.winnr, {
-    width = 1,
-    height = thumb_height,
-    row = dim.row + thumb_offset,
-    col = dim.col + dim.width - 1, -- info.col was already added scrollbar offset.
-    zindex = zindex + 2,
-  })
-end
+function Scrollbar:update() end
 
 function Scrollbar:_open_win(opts)
   local bufnr = vim.api.nvim_create_buf(false, true)
